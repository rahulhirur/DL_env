from skimage.io import imread
from skimage.color import gray2rgb
import pandas as pd
import matplotlib.pyplot as plt
import torchvision as tv
import torch as t

img_no = 131

train_mean = [0.59685254, 0.59685254, 0.59685254]
train_std = [0.16043035, 0.16043035, 0.16043035]


class AddGaussianNoise:
    def __init__(self, mean=0., std=1.):
        self.std = std
        self.mean = mean

    def __call__(self, tensor):
        return tensor + t.randn(tensor.size()) * self.std + self.mean

    def __repr__(self):
        return self.__class__.__name__ + '(mean={0}, std={1})'.format(self.mean, self.std)


transform = tv.transforms.Compose([
    tv.transforms.ToPILImage(),
    tv.transforms.RandomApply([tv.transforms.ColorJitter(brightness=0, contrast=0.1, saturation=0, hue=0)], p=0.3),
    tv.transforms.ToTensor(),

    tv.transforms.RandomHorizontalFlip(p=0.3),
    tv.transforms.RandomVerticalFlip(p=0.3),
    tv.transforms.RandomErasing(p=0.3, ratio=(0.54, 0.4), scale=(0.02, 0.04), value=0),
    tv.transforms.RandomApply([tv.transforms.Lambda(AddGaussianNoise(0, .009))], p=0.1),
    tv.transforms.Normalize(mean=train_mean, std=train_std, inplace=False)])

tab = pd.read_csv('data.csv', sep=';')
print(tab.iloc[img_no, 1])
print(tab.iloc[img_no, 2])
img = gray2rgb(imread(tab.iloc[img_no, 0]))
plt.subplot(221)
plt.title('Crack- ' + str(tab.iloc[img_no, 1]) + ';Inactive- ' + str(tab.iloc[img_no, 2]))
plt.imshow(img)
# plt.title = 'Original image'
# plt.show()

img2 = transform(img)

img3 = transform(img)

img4 = transform(img)
# print(img.dtype)
# print(tv.transforms.ToPILImage()(img))

# Display image with matplotlib
plt.subplot(222)
plt.imshow(tv.transforms.ToPILImage()(img2))
# plt.title = 'Transformed image'
plt.subplot(223)
plt.imshow(tv.transforms.ToPILImage()(img3))

plt.subplot(224)
plt.imshow(tv.transforms.ToPILImage()(img4))

plt.show()
